app: geeks4innovations
service: dev-release-common-utils # NOTE: update this with your service name

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  # - serverless-bundle
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x #supports upto node 10 max
  timeout: 20
  stage: devlop
  region: us-east-1

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4010
  stage: ${opt:stage, self:provider.stage}
  DB_NAME: onlinesastry
  USERNAME: master
  PASSWORD: password
  VPC_CIDR: 10
  # MYSQL:
  #   HOST:
  #     Fn::GetAtt: [MySqlRDSInstance, Endpoint.Address]
  #   PORT:
  #     Fn::GetAtt: [MySqlRDSInstance, Endpoint.Port]
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
# iamRoleStatements:
#   - Effect: "Allow"
#     Action:
#       - ses:SendEmail
#       - ses:SendRawEmail
#     Resource:
#       - "arn:aws:ses:${self:provider.region}:*:*"

# you can define service wide environment variables here
#  environment:

# you can add packaging information here
package:
  exclude:
    - __tests__/**
    - migrations/**
    - mocks/**
    - seeders/**
    - tests/**
    - readme.md
environment:
  sendgridkey: ${env:SENDGRID_API_KEY}
  stripeSecretKey: ${env:STRIPE_SECRET_KEY}
  MYSQL_HOST: ${self:custom.MYSQL.HOST}
  MYSQL_PORT: ${self:custom.MYSQL.PORT}
  DB_NAME: ${self:custom.DB_NAME}
  USERNAME: ${self:custom.USERNAME}
  PASSWORD: ${self:custom.PASSWORD}

functions:
  hello:
    handler: handler.hello
  createCustomer:
    handler: functions/index.createCustomer
    events:
      - http:
          method: get
          path: payment
          cors: true
  payment:
    handler: functions/index.payment
    events:
      - http:
          method: post
          path: payment
          cors: true
  sendOTP:
    handler: functions/index.generateOTP
    events:
      - http:
          method: get
          path: veify/{number}
          cors: true
  verifyOtp:
    handler: functions/index.verifyOtp
    events:
      - http:
          method: post
          path: veify
          cors: true
  sendEmails:
    handler: functions/index.sendEmails
    events:
      - http:
          method: post
          path: sendEmails
          cors: true
  sendEmailsByTemplate:
    handler: functions/index.sendEmailsByTemplate
    events:
      - http:
          method: post
          path: sendEmailsByTemplate
          cors: true
# you can add CloudFormation resource templates here
# Create our resources with separate CloudFormation templates
resources:
  Resources:
    # ServerlessInternetGateway: ${file(./resources/ServerlessInternetGateway.yml)}
    # ServerlessVPC: ${file(./resources/ServerlessVPC.yml)}
    # ServerlessVPCGA: ${file(./resources/ServerlessVPCGA.yml)}
    # ServerlessSubnetA: ${file(./resources/ServerlessSubnetA.yml)}
    # ServerlessSubnetB: ${file(./resources/ServerlessSubnetB.yml)}
    # ServerlessSubnetC: ${file(./resources/ServerlessSubnetC.yml)}
    # ServerlessSubnetGroup: ${file(./resources/ServerlessSubnetGroup.yml)}
    # ServerlessSecurityGroup: ${file(./resources/ServerlessSecurityGroup.yml)}
    # RouteTablePublic: ${file(./resources/RouteTablePublic.yml)}
    # RoutePublic: ${file(./resources/RoutePublic.yml)}
    # RouteTableAssociationSubnetA: ${file(./resources/RouteTableAssociationSubnetA.yml)}
    # RouteTableAssociationSubnetB: ${file(./resources/RouteTableAssociationSubnetB.yml)}
    # RouteTableAssociationSubnetC: ${file(./resources/RouteTableAssociationSubnetC.yml)}
    # MySqlRDSInstance: ${file(./resources/MySqlRDSInstance.yml)}
    # s3-bucket: ${file(resources/s3-bucket.yml)}
    # CognitoAuthRole: ${file(resources/CognitoAuthRole.yml)}
    # CognitoIdentityPool: ${file(resources/CognitoIdentityPool.yml)}
    # CognitoIdentityPoolRoles: ${file(resources/CognitoIdentityPoolRoles.yml)}
    # CognitoUserPool: ${file(resources/CognitoUserPool.yml)}
    # CognitoUserPoolClient: ${file(resources/CognitoUserPoolClient.yml)}
    # GatewayResponseDefault4XX: ${file(resources/GatewayResponseDefault4XX.yml)}
    # GatewayResponseDefault5XX: ${file(resources/GatewayResponseDefault5XX.yml)}
